
analyzer:
  strong-mode:
    implicit-casts: false
    implicit-dynamic: true
  errors:
    missing_required_param: error
    missing_return: error
    avoid_print: warning
    no_duplicate_case_values: error
    close_sinks: error
    cancel_subscriptions: error
    dead_code: info
    invalid_assignment: warning
    todo: ignore
    sdk_version_async_exported_from_core: ignore
  exclude:
    # - "lib/src/**"  #Exlude DB and http?

linter:
  rules:
    - always_declare_return_types
    - always_put_control_body_on_new_line
    - always_require_non_null_named_parameters
    - always_specify_types
    - annotate_overrides
    - avoid_as # <-- this one to make alweis if statemt to be sure that as will not crash app
    # - avoid_bool_literals_in_conditional_expressions  #<-- I like literals but can be discussed
    # - avoid_classes_with_only_static_members # <-- to consider its good practise but can complicate sorting
    - avoid_empty_else
    - avoid_field_initializers_in_const_classes # to not allocate unncesery memory http://dart-lang.github.io/linter/lints/avoid_field_initializers_in_const_classes.html
    - avoid_function_literals_in_foreach_calls
    - avoid_init_to_null
    - avoid_positional_boolean_parameters
    - avoid_relative_lib_imports
    - avoid_renaming_method_parameters
    - avoid_return_types_on_setters
    - avoid_returning_null_for_void
    # - avoid_returning_this # <-- to consider, will force cascade (new A()..b()..c())
    - avoid_setters_without_getters
    # - avoid_shadowing_type_parameters # <--can be usefull but to consider
    - avoid_single_cascade_in_expression_statements
    #- avoid_slow_async_io <-- need to deep more : https://dart-lang.github.io/linter/lints/avoid_slow_async_io.html
    - avoid_types_as_parameter_names
    # - avoid_types_on_closure_parameters # conflicts with always_specify_types
    - avoid_unused_constructor_parameters
    - avoid_void_async
    - await_only_futures #<-- to make sure that async will be asynchronus inside
    - camel_case_types
    - cancel_subscriptions
    - cascade_invocations # <-- to make code clean and sorted
    - control_flow_in_finally
    - curly_braces_in_flow_control_structures
    # - diagnostic_describe_all_properties # Experimental will be enable when will be working
    - directives_ordering
    - empty_catches
    - empty_constructor_bodies
    - empty_statements
    - file_names
    - flutter_style_todos
    - hash_and_equals
    # - implementation_imports <-- as we import local lib need to be commaned
    - iterable_contains_unrelated_type
    - join_return_with_assignment # <-- to discuss this will reduce code lines
    # - library_names <-- no because ob 'stargate-ble-flutter' in libs should be '_' insted of '-'
    - library_prefixes
    - lines_longer_than_80_chars
    - list_remove_unrelated_type
    - no_adjacent_strings_in_list
    - no_duplicate_case_values
    - non_constant_identifier_names
    - null_closures
    - overridden_fields
    # - package_api_docs
    - package_names
    - package_prefixed_library_names
    - prefer_adjacent_string_concatenation
    - prefer_asserts_in_initializer_lists
    - prefer_asserts_with_message # <--to dicusson but make code easier to understand
    - prefer_collection_literals
    - prefer_conditional_assignment
    - prefer_const_constructors
    - prefer_const_constructors_in_immutables
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - prefer_constructors_over_static_methods # <-- force to ue named constructors than unclera static methods
    - prefer_contains
    - prefer_equal_for_default_values
    - prefer_final_fields # need to test it
    - prefer_final_in_for_each
    - prefer_final_locals
    - prefer_for_elements_to_map_fromIterable
    # - prefer_foreach <-- to consider but may produce some issues: http://dart-lang.github.io/linter/lints/prefer_foreach.html  in NOtes
    - prefer_function_declarations_over_variables
    - prefer_generic_function_type_aliases
    - prefer_if_elements_to_conditional_expressions
    - prefer_if_null_operators
    - prefer_initializing_formals
    - prefer_inlined_adds
    - prefer_interpolation_to_compose_strings
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_iterable_whereType
    # - prefer_mixin # <-- issue need to be fixed before enable: https://github.com/dart-lang/language/issues/32
    # - prefer_null_aware_operators # <-- issue need to be fixed before enable: https://github.com/flutter/flutter/pull/32711#issuecomment-492930932
    - prefer_single_quotes
    - prefer_spread_collections
    - prefer_typing_uninitialized_variables
    - prefer_void_to_null
    - provide_deprecation_message
    - recursive_getters
    - slash_for_doc_comments
    - sort_child_properties_last
    - sort_constructors_first
    - sort_pub_dependencies
    - sort_unnamed_constructors_first
    - test_types_in_equals
    - throw_in_finally
    - type_annotate_public_apis
    - type_init_formals
    - unawaited_futures #need to test it
    - unnecessary_await_in_return #need to test it
    - unnecessary_brace_in_string_interps
    - unnecessary_const
    - unnecessary_getters_setters # <-- never use getter and setter 'just because'
    - unnecessary_lambdas #<-- need to test it
    - unnecessary_new
    - unnecessary_null_aware_assignments
    - unnecessary_null_in_if_null_operators
    - unnecessary_overrides
    - unnecessary_parenthesis
    - unnecessary_statements
    - unnecessary_this
    - unrelated_type_equality_checks
    - use_full_hex_values_for_flutter_colors
    - use_rethrow_when_possible
    - use_setters_to_change_properties
    - use_string_buffers #<-- to improve performance
    - use_to_and_as_if_applicable
    - void_checks
    - valid_regexps
